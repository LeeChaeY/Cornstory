<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE mapper
		PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
		"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.cornstory.service.product.ProductDao">

	<resultMap type="product" id="productSelectMap">
		<result property="prodNo" column="prod_no" jdbcType="INTEGER"/>
		<result property="workNo" column="work_no" jdbcType="INTEGER"/>
		<result property="episodeNo" column="episode_no" jdbcType="INTEGER"/>
		<result property="userId" column="user_id" jdbcType="VARCHAR"/>
		<result property="prodCategory" column="prod_category" jdbcType="INTEGER"/>
		<result property="prodName" column="prod_name" jdbcType="VARCHAR"/>
		<result property="workName" column="work_name" jdbcType="VARCHAR"/>
		<result property="episodeOrder" column="episode_order" jdbcType="INTEGER"/>
		<result property="prodImage" column="prod_image" jdbcType="VARCHAR"/>
		<result property="prodPrice" column="prod_price" jdbcType="INTEGER"/>
		<result property="prodCnt" column="prod_cnt" jdbcType="INTEGER"/>
		<result property="prodDate" column="prod_date" jdbcType="DATE"/>
	</resultMap>

	<resultMap type="work" id="workSelectMap">
		<id 	property="workNo" 		column="work_no"/>
		<result property="userId" 		column="user_id"/>
		<result property="category" 	column="category"/>
		<result property="genre1" 		column="genre1"/>
		<result property="genre2" 		column="genre2"/>
		<result property="genre3" 		column="genre3"/>
		<result property="fap" 			column="fap"/>
		<result property="workName" 	column="work_name"/>
		<result property="note" 		column="note"/>
		<result property="thumbnail" 	column="thumbnail"/>
		<result property="viewCnt" 		column="view_cnt"/>
		<result property="workDate" 	column="work_date"/>
		<result property="status" 		column="status"/>
		<result property="workDesc" 	column="work_desc"/>
		<result property="complete" 	column="complete"/>
	</resultMap>



	<insert id="addProduct" parameterType="product" useGeneratedKeys="true"
			keyProperty="prodNo" keyColumn="prod_no">
		INSERT
		INTO product (work_no, episode_no, user_id, prod_category, prod_name, episode_order, prod_image, prod_price, prod_cnt, prod_date)
		VALUES (
				    #{workNo},
				    #{episodeNo},
				    #{userId},
				    #{prodCategory},
				    #{prodName},
		        	#{episodeOrder},
					#{prodImage},
		        	#{prodPrice},
				    #{prodCnt},
				   DATE_FORMAT(NOW(), '%Y-%m-%d'))
	</insert>

	<select id="getProduct" parameterType="int" resultMap="productSelectMap">
		SELECT *
		FROM product
		WHERE prod_no = #{prodNo}
	</select>

	<select id="getProductByEpisodeNo" parameterType="int" resultMap="productSelectMap">
		SELECT *
		FROM product
		WHERE episode_no = #{episodeNo}
	</select>

	<update id="updateProduct" parameterType="product">
		UPDATE product
		<trim prefix="set" suffixOverrides=",">
			<if test="prodName != null">
				prod_name = #{prodName},
			</if>
			<if test="prodPrice != 0">
				prod_price = #{prodPrice},
			</if>
			<if test="prodCnt != 1 and prodCnt != 0">
				prod_cnt = #{prodCnt},
			</if>
			<if test="prodImage != null">
				prod_image = #{prodImage}
			</if>
		</trim>
		WHERE prod_no = #{prodNo}
	</update>

	<update id="updateProductEpisode" parameterType="product">
		UPDATE product
		<trim prefix="set" suffixOverrides=",">
			<if test="prodPrice != 0">
				prod_price = #{prodPrice}
			</if>
		</trim>
		WHERE work_no = #{workNo} and episode_no IS NOT NULL
	</update>

	<delete id="deleteProduct" parameterType="int">
		DELETE
		FROM product
		WHERE prod_no = #{prodNo}
	</delete>

	<select id="countProductPopCorn" parameterType="search" resultType="int">
		SELECT COUNT(*) AS totalCount
		FROM product
		WHERE prod_category = 0
		ORDER BY prod_price
	</select>

	<select id="listProductPopcorn" parameterType="map" resultMap="productSelectMap">
		SELECT *
		FROM product
		WHERE prod_category = 0
		ORDER BY prod_price
	</select>

	<select id="countProductCopyright" parameterType="map" resultType="int">
		SELECT COUNT(*) AS totalCount
		FROM (SELECT prod_no, prod_category, prod_name, episode_order,
					prod_price, prod_image, prod_date, work_no,
					U.user_id, nickname
				FROM product P JOIN user U ON P.user_id = U.user_id
				<where>
					prod_category = 2
					<if test='search.searchKeyword != null and !search.searchKeyword.equals("")'>
						AND LOWER(prod_name) LIKE LOWER(CONCAT('%', #{search.searchKeyword},'%'))
						OR LOWER(nickname) LIKE LOWER(CONCAT('%', #{search.searchKeyword},'%'))
					</if>
					<if test='userStatus == 1'>
						AND U.user_id = #{userId}
					</if>
				</where>
			) countTable
	</select>

	<select id="listProductCopyright" parameterType="map" resultMap="productSelectMap">
	SELECT *
		FROM ( SELECT inner_table.*, @rownum := @rownum + 1 AS row_seq
		FROM (SELECT prod_no, prod_category, prod_name, episode_order,
					prod_price, prod_image, prod_date, work_no,
					U.user_id, nickname
				FROM  product P JOIN user U ON U.user_id = P.user_id
				<where>
					prod_category = 2
					<if test='search.searchKeyword != null and !search.searchKeyword.equals("")'>
						AND LOWER(prod_name) LIKE LOWER(CONCAT('%', #{search.searchKeyword},'%'))
						OR LOWER(nickname) LIKE LOWER(CONCAT('%', #{search.searchKeyword},'%'))
					</if>
					<if test='userStatus == 1'>
						AND U.user_id = #{userId}
					</if>
				</where>
				ORDER BY prod_no
			) inner_table, (SELECT @rownum := 0) r
			LIMIT #{endRowNum}
		) AS result
		WHERE row_seq BETWEEN #{startRowNum} AND #{endRowNum}
	</select>

	<select id="listCompleteWork" parameterType="string" resultMap="workSelectMap">
		SELECT work_no, user_id, category, fap,
			   work_name, thumbnail, work_date, status, complete
		FROM work
		WHERE complete = 1 and status = 0 and user_id = #{userId}
		  	and work_no not in (SELECT work_no
							  	FROM product
							  	WHERE prod_category = 2);
	</select>

	<select id="countProductProdName" parameterType="int" resultType="int">
		SELECT COUNT(*)
		FROM product
		WHERE prod_cnt = #{prodCnt}
	</select>

	<select id="countLastEpisode" parameterType="int" resultType="int">
		SELECT COALESCE(MAX(E.episode_order), 0)
		FROM episode E JOIN product P ON E.work_no = P.work_no
		WHERE P.work_no = #{workNo};
	</select>

	<!--저작권의 이름들 가져오가-->
	<select id="getCopylight" parameterType="String" resultMap="productSelectMap">
		SELECT prod_name from product P, purchase Pu where P.prod_no=Pu.prod_no And Pu.buyer_id=#{userId} AND episode_no IS NULL
	</select>

</mapper>